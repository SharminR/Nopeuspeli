{"version":3,"sources":["Button.js","Score.js","Gameover.js","App.js","serviceWorker.js","index.js"],"names":["Button","react_default","a","createElement","style","backgroundColor","this","props","active","activeColor","buttonColor","className","onClick","clickHandler","label","Component","defaultProps","Score","id","score","Gameover","scoreCallback","startCallback","getRandomInt","min","max","Math","floor","random","App","state","activeButton","buttonList","clicks","showGameover","showStartgame","timerId","undefined","delay","clickButton","btnId","_this","setState","prevState","slice","gameover","clearTimeout","next","length","nextActive","newList","push","setTimeout","_this2","src_Score","src_Button","src_Gameover","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAGMA,+LAEF,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAAQ,CAAEC,gBAAiBC,KAAKC,MAAMC,OAASF,KAAKC,MAAME,YAAcH,KAAKC,MAAMG,aAAeC,UAAW,UAAYL,KAAKC,MAAMC,OAAS,UAAY,IAAOI,QAAUN,KAAKC,MAAMM,cACtLP,KAAKC,MAAMO,cAJFC,cASrBf,EAAOgB,aAAe,CACpBP,YAAa,SAGAT,QCLAiB,0LANX,OACEhB,EAAAC,EAAAC,cAAA,OAAKe,GAAG,mBAAR,UAAmCZ,KAAKC,MAAMY,cAHhCJ,cCoBLK,0LAjBX,IAAMD,EAAQb,KAAKC,MAAMc,gBAEzB,OACEpB,EAAAC,EAAAC,cAAA,OAAKe,GAAG,WACNjB,EAAAC,EAAAC,cAAA,OAAKe,GAAG,YAAR,cACajB,EAAAC,EAAAC,cAAA,WADb,eAEcF,EAAAC,EAAAC,cAAA,WACXgB,EACDlB,EAAAC,EAAAC,cAAA,UAAQe,GAAG,YAAYN,QAASN,KAAKC,MAAMe,eAA3C,qBAVaP,cCEvB,SAASQ,EAAaC,EAAKC,GACrB,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,MA2F5CK,6MAvFbC,MAAQ,CACNC,aAAc,GACdC,WAAY,GACZC,OAAS,EACTC,cAAc,EACdC,eAAe,KAGnBC,aAAUC,IACVC,MAAQ,MAENC,YAAc,SAACC,GAERA,IAAUC,EAAKX,MAAME,WAAW,GAKrCS,EAAKC,SAAU,SAAAC,GACb,MAAO,CACPX,WAAYW,EAAUX,WAAWY,MAAM,GACvCX,OAAQU,EAAUV,OAAS,KAN3BQ,EAAKI,cAUTA,SAAW,WACTC,aAAaL,EAAKL,SAClBK,EAAKC,SAAS,CACZR,cAAc,OAIlBa,KAAO,WAEL,GAAGN,EAAKX,MAAME,WAAWgB,QAAU,GACjCP,EAAKI,eADP,CAKA,IAAII,GAAcR,EAAKX,MAAMC,aAAeR,EAAa,EAAE,IAAM,EAE7D2B,EAAUT,EAAKX,MAAME,WACzBkB,EAAQC,KAAKF,GAEbR,EAAKC,SAAS,CACZX,aAAckB,EACdjB,WAAYkB,IAGdT,EAAKH,OAAS,GACdG,EAAKL,QAAUgB,WAAYX,EAAKM,KAAMN,EAAKH,WAG7ChB,cAAgB,WACdmB,EAAKC,SAAS,CACZV,WAAY,GACZkB,QAAS,GACTjB,OAAS,EACTC,cAAc,EACdC,eAAe,EACfJ,aAAcR,EAAa,EAAE,KAE/BkB,EAAKH,MAAO,IACZG,EAAKM,UAGP1B,cAAgB,WACd,OAAOoB,EAAKX,MAAMG,gFAGX,IAAAoB,EAAA/C,KACP,OACEL,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAACmD,EAAD,CAAOnC,MAAUb,KAAKwB,MAAMG,SAC5BhC,EAAAC,EAAAC,cAAA,QAAMQ,UAAU,oBACdV,EAAAC,EAAAC,cAACoD,EAAD,CAAQ7C,YAAY,OAAOF,OAAqC,IAA5BF,KAAKwB,MAAMC,aAAqBlB,aAAe,WAAQwC,EAAKd,YAAY,MAC5GtC,EAAAC,EAAAC,cAACoD,EAAD,CAAQ7C,YAAY,SAASF,OAAqC,IAA5BF,KAAKwB,MAAMC,aAAqBlB,aAAe,WAAQwC,EAAKd,YAAY,MAC9GtC,EAAAC,EAAAC,cAACoD,EAAD,CAAQ7C,YAAY,QAAQF,OAAqC,IAA5BF,KAAKwB,MAAMC,aAAqBlB,aAAe,WAAQwC,EAAKd,YAAY,MAC7GtC,EAAAC,EAAAC,cAACoD,EAAD,CAAQ7C,YAAY,MAAMF,OAAqC,IAA5BF,KAAKwB,MAAMC,aAAqBlB,aAAe,WAAQwC,EAAKd,YAAY,MACzGjC,KAAKwB,MAAMI,cAAgBjC,EAAAC,EAAAC,cAACqD,EAAD,CAAUnC,cAAgBf,KAAKe,cAAgBC,cAAgBhB,KAAKgB,iBAEjGhB,KAAKwB,MAAMK,eAAiBlC,EAAAC,EAAAC,cAAA,UAAQe,GAAG,YAAYN,QAAUN,KAAKgB,eAAtC,oBAlFpBP,aCEE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b1f856bb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './button.css';\n\nclass Button extends Component {\n  render() {\n    return(\n        <div style={ { backgroundColor: this.props.active ? this.props.activeColor : this.props.buttonColor }} className={\"button\" + (this.props.active ? \" active\" : \"\") }  onClick={ this.props.clickHandler }>\n          { this.props.label }</div>\n    );\n  }\n}\n\nButton.defaultProps = {\n  activeColor: 'white'\n}\n\nexport default Button;\n","import React, { Component } from 'react';\nimport './score.css';\n\nclass Score extends Component { this\n  render() {\n    return(\n      <div id=\"score-container\">Score: { this.props.score }</div>\n    );\n  }\n}\n\nexport default Score;\n","import React, { Component } from \"react\";\nimport \"./gameover.css\";\nimport \"./app.css\";\n\nclass Gameover extends Component {\n  render() {\n    const score = this.props.scoreCallback();\n\n    return (\n      <div id=\"overlay\">\n        <div id=\"gameover\">\n          Game Over! <br />\n          Your score: <br />\n          {score}\n          <button id=\"startgame\" onClick={this.props.startCallback}>\n            New Game\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Gameover;\n","import React, { Component } from 'react';\nimport './app.css';\nimport Button from './Button';\nimport Score from './Score';\nimport Gameover from './Gameover';\n\nfunction getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\nclass App extends Component {\n  state = {\n    activeButton: '',\n    buttonList: [],\n    clicks : 0,\n    showGameover: false,\n    showStartgame: true\n  }\n\ntimerId = undefined;\ndelay = 1000;\n\n  clickButton = (btnId) => {\n    //console.log(\"Click\", btnId);\n    if(!(btnId === this.state.buttonList[0])) {\n      //game over\n      this.gameover();\n      return;\n    }\n    this.setState( prevState => {\n      return {\n      buttonList: prevState.buttonList.slice(1),\n      clicks: prevState.clicks + 1\n    };\n  });\n}\n  gameover = () => {\n    clearTimeout(this.timerId);\n    this.setState({\n      showGameover: true\n    });\n  }\n\n  next = () => {\n    //Check for Gameover\n    if(this.state.buttonList.length >= 10) {\n      this.gameover();\n      return;\n    }\n    //next active Button\n    let nextActive = (this.state.activeButton + getRandomInt(1,3)) % 4;\n\n    let newList = this.state.buttonList;\n    newList.push(nextActive);\n    //update active button state\n    this.setState({\n      activeButton: nextActive,\n      buttonList: newList\n    });\n    // set timer for next activation\n    this.delay -= 10;\n    this.timerId = setTimeout( this.next, this.delay);\n  }\n\n  startCallback = () => {\n    this.setState({\n      buttonList: [],\n      newList: [],\n      clicks : 0,\n      showGameover: false,\n      showStartgame: false,\n      activeButton: getRandomInt(0,3),\n    })\n    this.delay= 1000;\n    this.next();\n  }\n\n  scoreCallback = () => {\n    return this.state.clicks;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Score score = { this.state.clicks } />\n        <main className=\"button-container\">\n          <Button buttonColor='blue' active={ this.state.activeButton === 0 } clickHandler={ () => { this.clickButton(0); }}/>\n          <Button buttonColor='yellow' active={ this.state.activeButton === 1 } clickHandler={ () => { this.clickButton(1); }}/>\n          <Button buttonColor='green' active={ this.state.activeButton === 2 } clickHandler={ () => { this.clickButton(2); }}/>\n          <Button buttonColor='red' active={ this.state.activeButton === 3 } clickHandler={ () => { this.clickButton(3); }}/>\n          { this.state.showGameover && <Gameover scoreCallback={ this.scoreCallback } startCallback={ this.startCallback } /> }\n        </main>\n        { this.state.showStartgame && <button id=\"startgame\" onClick={ this.startCallback }>New Game</button>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}